generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  // 사용자 닉네임
  nickname         String            @unique
  // 사용자 전화번호
  phone            String            @unique
  // 사용자 프로필 사진
  picture          String?           @db.VarChar(100)
  // 사용자 생성 시간
  createdAt        DateTime          @default(now())
  // 프로필 마지막 수정 시간
  updatedAt        DateTime          @updatedAt
  // 사용자 삭제 시간 (존재할 시 없는 사용자로 취급)
  deletedAt        DateTime?
  // 상호작용 (조회, 좋아요, 채팅)
  interactions     PostInteraction[]
  // 입찰
  bids             PostBid[]
  // 게시글
  posts            Post[]
  // 채팅방
  chats            Chat[]
  // 채팅방 참여자 정보
  chatParticipants ChatParticipant[]
  // 채팅방 대화
  message          Message[]
}

enum PostType {
  sell
  buy
  auction
}

enum PostStatus {
  default
  reserved
  done
  canceled
}

enum SellMethod {
  direct
  delivery
  all
}

model Post {
  id               Int               @id @default(autoincrement())
  // 게시글 작성자 ID
  userId           Int
  // 게시글 작성자
  user             User              @relation(fields: [userId], references: [id])
  // 게시글 종류 (판매, 구매, 경매)
  type             PostType
  // 게시글 상태 (기본, 예약됨, 거래완료, 취소됨)
  status           PostStatus        @default(default)
  // 메타데이터 (키-값 쌍)
  metadatas        PostMetadata[]
  // 카테고리
  category         PostCategory?     @relation(fields: [categoryId], references: [id])
  // 카테고리 ID
  categoryId       Int?
  // 이미지
  images           PostImage[]
  // 게시글 제목
  title            String            @db.VarChar(100)
  // 게시글 상세 설명 (내용)
  content          String            @db.VarChar(5000)
  // 가격 (NULL일 시 가격제시)
  price            Int?
  // 배송비 포함 여부
  shippingIncluded Boolean           @default(true)
  // 상품 상태 (NULL일 시 상태없음)
  condition        Int?
  // 경매 마감 시간 (NULL일 시 경매 게시글 아님)
  auctionUntil     DateTime?
  // 거래 가능 위치
  location         String?           @db.VarChar(30)
  // 거래 방식 (직거래, 택배, 둘 다)
  sellMethod       SellMethod
  // 상호작용 (조회, 좋아요, 채팅)
  interactions     PostInteraction[]
  // 입찰
  bids             PostBid[]
  // 게시글 작성 시간
  createdAt        DateTime          @default(now())
  // 게시글 마지막 수정 시간
  updatedAt        DateTime          @updatedAt
  // 글 삭제 시간 (존재할 시 삭제된 게시글로 취급)
  deletedAt        DateTime?
}

enum InteractionType {
  view
  like
  chat
}

model PostInteraction {
  id        Int             @id @default(autoincrement())
  // 상호작용한 게시글 ID
  postId    Int
  // 상호작용한 게시글
  post      Post            @relation(fields: [postId], references: [id])
  // 상호작용한 유저 ID
  userId    Int
  // 상호작용한 유저
  user      User            @relation(fields: [userId], references: [id])
  // 상호작용 종류 (조회, 좋아요, 채팅)
  type      InteractionType
  // 상호작용 시간
  createdAt DateTime        @default(now())
}

enum PresetType {
  key
  value
}

model PostMetadataPreset {
  id                Int            @id @default(autoincrement())
  // 프리셋 종류 (키, 값)
  type              PresetType
  // 시스템에 의해 생성된 프리셋인지 여부
  isCreatedBySystem Boolean        @default(false)
  // 프리셋 내용
  content           String         @db.VarChar(100)
  // 프리셋 생성 시간
  createdAt         DateTime       @default(now())
  // 이 프리셋을 키로 사용하는 메타데이터
  keyMeta           PostMetadata[] @relation("PostMetadataPresetKey")
  // 이 프리셋을 값으로 사용하는 메타데이터
  valueMeta         PostMetadata[] @relation("PostMetadataPresetValue")
}

model PostMetadata {
  id        Int                @id @default(autoincrement())
  // 메타데이터가 속한 게시글 ID
  postId    Int
  // 메타데이터가 속한 게시글
  post      Post               @relation(fields: [postId], references: [id])
  // 메타데이터 프리셋 키 ID
  keyId     Int
  // 메타데이터 프리셋 키
  key       PostMetadataPreset @relation("PostMetadataPresetKey", fields: [keyId], references: [id])
  // 메타데이터 프리셋 값 ID
  valueId   Int
  // 메타데이터 프리셋 값
  value     PostMetadataPreset @relation("PostMetadataPresetValue", fields: [valueId], references: [id])
  // 메타데이터 내용
  content   String             @db.VarChar(100)
  // 메타데이터 생성 시간
  createdAt DateTime           @default(now())
}

model PostCategory {
  id        Int            @id @default(autoincrement())
  // 카테고리 이름
  name      String         @unique @db.VarChar(100)
  // 상위 카테고리
  parent    PostCategory?  @relation("PostCategoryParent", fields: [parentId], references: [id])
  // 상위 카테고리 ID
  parentId  Int?
  // 하위 카테고리
  children  PostCategory[] @relation("PostCategoryParent")
  // 이 카테고리에 속한 게시글
  posts     Post[]
  // 카테고리 생성 시간
  createdAt DateTime       @default(now())
}

model PostImage {
  // 이미지 ID (AWS S3)
  imageId   Int      @id @unique
  // 이미지가 속한 게시글 ID
  postId    Int
  // 이미지가 속한 게시글
  post      Post     @relation(fields: [postId], references: [id])
  // 이미지 생성 시간
  createdAt DateTime @default(now())
}

model PostBid {
  id        Int      @id @default(autoincrement())
  // 경매에 참여한 게시글 ID
  postId    Int
  // 경매에 참여한 게시글
  post      Post     @relation(fields: [postId], references: [id])
  // 경매에 참여한 유저 ID
  userId    Int
  // 경매에 참여한 유저
  user      User     @relation(fields: [userId], references: [id])
  // 입찰 가격
  price     Int
  // 입찰 시간
  createdAt DateTime @default(now())
  // 입찰 수정 시간
  updatedAt DateTime @updatedAt
}

model Chat {
  id               Int               @id @default(autoincrement())
  // 채팅방 생성 시간
  createdAt        DateTime          @default(now())
  // 채팅방 마지막 수정 시간
  updatedAt        DateTime          @updatedAt
  // 채팅방 삭제 시간 (존재할 시 삭제된 채팅방으로 취급)
  deletedAt        DateTime?
  // 채팅방 참여자
  participants     User[]
  // 채팅방 참여자 정보
  participantsInfo ChatParticipant[]
  // 채팅방 대화
  messages         Message[]
}

model ChatParticipant {
  id              Int      @id @default(autoincrement())
  // 채팅방 ID
  chatId          Int
  // 채팅방
  chat            Chat     @relation(fields: [chatId], references: [id])
  // 참여자 ID
  userId          Int
  // 참여자
  user            User     @relation(fields: [userId], references: [id])
  // 참여자가 읽은 마지막 메시지 ID
  lastRead        Int?
  // 참여자가 읽은 마지막 메시지
  lastReadMessage Message? @relation(fields: [lastRead], references: [id])
  // 참여자가 채팅방에 들어온 시간
  joinedAt        DateTime @default(now())
}

model Message {
  id              Int               @id @default(autoincrement())
  // 메시지가 속한 채팅방 ID
  chatId          Int
  // 메시지가 속한 채팅방
  chat            Chat              @relation(fields: [chatId], references: [id])
  // 메시지를 보낸 유저 ID
  userId          Int
  // 메시지를 보낸 유저
  user            User              @relation(fields: [userId], references: [id])
  // 메시지 내용
  content         String            @db.VarChar(5000)
  // 메시지 생성 시간
  createdAt       DateTime          @default(now())
  // 채팅방 참여자 정보
  participantInfo ChatParticipant[]
}
